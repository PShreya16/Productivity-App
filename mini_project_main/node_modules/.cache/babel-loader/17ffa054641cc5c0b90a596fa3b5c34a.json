{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fokus2\\\\mini_project_main\\\\src\\\\components\\\\notes\\\\NotesListArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { NoteCard } from \"./../../components/notes/NoteCard\";\nimport { NewNoteButton } from \"./NewNoteButton\";\nimport NoteSearchInput from \"./NoteSearchInput\";\nimport emptyNotes from \"./../../images/emptyNotes.svg\";\nconst NotesListAreaContainer = styled.div`\n    display: flex;\n    flex: 3 1 0;\n    flex-direction: column;\n    overflow-y: auto;\n    position: relative;\n    margin: 20px 0 0 30px;\n    background: ${p => `url(${p.background}) no-repeat center`};\n    background-size: 400px;\n`;\n_c = NotesListAreaContainer;\nconst NoteSearchDiv = styled.div`\n    display: flex;\n    width: 90%;\n    justify-content: ${p => p.isGridView ? \"flex-start\" : \"center\"};\n`;\n_c2 = NoteSearchDiv;\nconst NotesDiv = styled.div`\n    display: flex;\n    flex-direction: ${p => p.isGridView ? \"row\" : \"column\"};\n    flex-wrap: wrap;\n    align-items: center;\n    width: 90%;\n`;\n_c3 = NotesDiv;\nexport default function NotesListArea({\n  setNoteInPreview\n}) {\n  _s();\n\n  const notesArray = useSelector(state => state.notes.notesArray);\n  const isGridView = useSelector(state => state.settings.isGridView);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filteredNotes, setFilteredNotes] = useState([]);\n  useEffect(() => {\n    if (searchQuery.trim().length !== 0) {\n      setFilteredNotes(notesArray.filter(note => {\n        if (note.content.trim().length === 0) return true;else return note.content.toLowerCase().includes(searchQuery.toLowerCase().trim());\n      }));\n    } else {\n      setFilteredNotes(notesArray);\n    }\n  }, [searchQuery, notesArray]);\n  return /*#__PURE__*/_jsxDEV(NotesListAreaContainer, {\n    background: emptyNotes,\n    children: [/*#__PURE__*/_jsxDEV(NoteSearchDiv, {\n      isGridView: isGridView,\n      children: /*#__PURE__*/_jsxDEV(NoteSearchInput, {\n        isGridView: isGridView,\n        noSearchResults: notesArray.length !== 0 && filteredNotes.length === 0,\n        setSearchQuery: setSearchQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NotesDiv, {\n      isGridView: isGridView,\n      children: [/*#__PURE__*/_jsxDEV(NewNoteButton, {\n        isGridView: isGridView,\n        setNoteInPreview: setNoteInPreview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), filteredNotes.map((note, idx) => /*#__PURE__*/_jsxDEV(NoteCard, {\n        isGridView: isGridView,\n        setNoteInPreview: setNoteInPreview,\n        note: note\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NotesListArea, \"uUV9+lSVqufjRafGoREBwcVF7CE=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c4 = NotesListArea;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"NotesListAreaContainer\");\n$RefreshReg$(_c2, \"NoteSearchDiv\");\n$RefreshReg$(_c3, \"NotesDiv\");\n$RefreshReg$(_c4, \"NotesListArea\");","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/components/notes/NotesListArea.js"],"names":["React","useEffect","useState","useSelector","styled","NoteCard","NewNoteButton","NoteSearchInput","NotesListAreaContainer","div","p","background","NoteSearchDiv","isGridView","NotesDiv","NotesListArea","setNoteInPreview","notesArray","state","notes","settings","searchQuery","setSearchQuery","filteredNotes","setFilteredNotes","trim","length","filter","note","content","toLowerCase","includes","emptyNotes","map","idx"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { NoteCard } from \"./../../components/notes/NoteCard\";\nimport { NewNoteButton } from \"./NewNoteButton\";\nimport NoteSearchInput from \"./NoteSearchInput\";\nimport emptyNotes from \"./../../images/emptyNotes.svg\";\n\nconst NotesListAreaContainer = styled.div`\n    display: flex;\n    flex: 3 1 0;\n    flex-direction: column;\n    overflow-y: auto;\n    position: relative;\n    margin: 20px 0 0 30px;\n    background: ${(p) => `url(${p.background}) no-repeat center`};\n    background-size: 400px;\n`;\n\nconst NoteSearchDiv = styled.div`\n    display: flex;\n    width: 90%;\n    justify-content: ${(p) => (p.isGridView ? \"flex-start\" : \"center\")};\n`;\n\nconst NotesDiv = styled.div`\n    display: flex;\n    flex-direction: ${(p) => (p.isGridView ? \"row\" : \"column\")};\n    flex-wrap: wrap;\n    align-items: center;\n    width: 90%;\n`;\n\nexport default function NotesListArea({ setNoteInPreview }) {\n    const notesArray = useSelector((state) => state.notes.notesArray);\n    const isGridView = useSelector((state) => state.settings.isGridView);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [filteredNotes, setFilteredNotes] = useState([]);\n\n    useEffect(() => {\n        if (searchQuery.trim().length !== 0) {\n            setFilteredNotes(\n                notesArray.filter((note) => {\n                    if (note.content.trim().length === 0) return true;\n                    else return note.content.toLowerCase().includes(searchQuery.toLowerCase().trim());\n                })\n            );\n        } else {\n            setFilteredNotes(notesArray);\n        }\n    }, [searchQuery, notesArray]);\n\n    return (\n        <NotesListAreaContainer background={emptyNotes}>\n            <NoteSearchDiv isGridView={isGridView}>\n                <NoteSearchInput isGridView={isGridView} noSearchResults={notesArray.length !== 0 && filteredNotes.length === 0} setSearchQuery={setSearchQuery} />\n            </NoteSearchDiv>\n            <NotesDiv isGridView={isGridView}>\n                <NewNoteButton isGridView={isGridView} setNoteInPreview={setNoteInPreview} />\n                {filteredNotes.map((note, idx) => (\n                    <NoteCard isGridView={isGridView} key={idx} setNoteInPreview={setNoteInPreview} note={note} />\n                ))}\n            </NotesDiv>\n        </NotesListAreaContainer>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}