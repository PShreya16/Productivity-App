{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fokus2\\\\mini_project_main\\\\src\\\\containers\\\\settings\\\\DefaultTaskLabel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { updateDefaultLabel } from \"./settingsSlice\";\nimport { InputDiv } from \"./index\";\nconst DefaultTaskLabelBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 80%;\n    height: 70px;\n    background-color: ${p => p.theme.backgroundSecondary};\n    p {\n        display: inline-block;\n        margin: 0;\n    }\n`;\n_c = DefaultTaskLabelBox;\nconst LabelInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border: 0;\n    background-color: ${p => p.theme.backgroundSecondary};\n    color: ${p => p.theme.primaryText};\n    font-size:0.8em;\n    option {\n        font-weight: bold;\n    }\n`;\n_c2 = LabelInput;\nexport function DefaultTaskLabel() {\n  _s();\n\n  const labels = useSelector(s => s.tasks.labels);\n  const defaultLabel = useSelector(s => s.settings.defaultLabel);\n  const [updatedLabel, setUpdatedLabel] = useState(defaultLabel);\n  const dispatch = useDispatch();\n\n  function onBlur(updatedLabel) {\n    updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n    dispatch(updateDefaultLabel(updatedLabel));\n  }\n\n  return /*#__PURE__*/_jsxDEV(DefaultTaskLabelBox, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Default Task Label \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputDiv, {\n      children: /*#__PURE__*/_jsxDEV(LabelInput, {\n        name: \"labels\",\n        onBlur: () => onBlur(updatedLabel),\n        defaultValue: updatedLabel,\n        onChange: e => setUpdatedLabel(e.target.value),\n        onKeyDown: e => e.key === \"Enter\" ? onBlur(updatedLabel) : null,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"none\",\n          children: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), Object.keys(labels).map((e, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n          style: {\n            color: `${labels[e].color}`\n          },\n          value: e,\n          children: e\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DefaultTaskLabel, \"IPzueohsGA+QKCYgl5Bv4T2osU0=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c3 = DefaultTaskLabel;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DefaultTaskLabelBox\");\n$RefreshReg$(_c2, \"LabelInput\");\n$RefreshReg$(_c3, \"DefaultTaskLabel\");","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/containers/settings/DefaultTaskLabel.js"],"names":["React","useState","useSelector","useDispatch","styled","updateDefaultLabel","InputDiv","DefaultTaskLabelBox","div","p","theme","backgroundSecondary","LabelInput","select","primaryText","DefaultTaskLabel","labels","s","tasks","defaultLabel","settings","updatedLabel","setUpdatedLabel","dispatch","onBlur","e","target","value","key","Object","keys","map","idx","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,MAAMC,mBAAmB,GAAGH,MAAM,CAACI,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA,wBAAyBC,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQC,mBAAoB;AAC3D;AACA;AACA;AACA;AACA,CAXA;KAAMJ,mB;AAaN,MAAMK,UAAU,GAAGR,MAAM,CAACS,MAAO;AACjC;AACA;AACA;AACA,wBAAyBJ,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQC,mBAAoB;AAC3D,aAAcF,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQI,WAAY;AACxC;AACA;AACA;AACA;AACA,CAVA;MAAMF,U;AAYN,OAAO,SAASG,gBAAT,GAA4B;AAAA;;AAC/B,QAAMC,MAAM,GAAGd,WAAW,CAAEe,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQF,MAAhB,CAA1B;AAEA,QAAMG,YAAY,GAAGjB,WAAW,CAAEe,CAAD,IAAOA,CAAC,CAACG,QAAF,CAAWD,YAAnB,CAAhC;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAACkB,YAAD,CAAhD;AACA,QAAMI,QAAQ,GAAGpB,WAAW,EAA5B;;AAEA,WAASqB,MAAT,CAAgBH,YAAhB,EAA8B;AAC1BA,IAAAA,YAAY,GAAGA,YAAY,KAAK,MAAjB,GAA0B,IAA1B,GAAiCA,YAAhD;AACAE,IAAAA,QAAQ,CAAClB,kBAAkB,CAACgB,YAAD,CAAnB,CAAR;AACH;;AAED,sBACI,QAAC,mBAAD;AAAA,4BACI;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,QAAD;AAAA,6BACI,QAAC,UAAD;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,MAAM,EAAE,MAAMG,MAAM,CAACH,YAAD,CAFxB;AAGI,QAAA,YAAY,EAAEA,YAHlB;AAII,QAAA,QAAQ,EAAGI,CAAD,IAAOH,eAAe,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAJpC;AAKI,QAAA,SAAS,EAAGF,CAAD,IAAQA,CAAC,CAACG,GAAF,KAAU,OAAV,GAAoBJ,MAAM,CAACH,YAAD,CAA1B,GAA2C,IALlE;AAAA,gCAOI;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,EASKQ,MAAM,CAACC,IAAP,CAAYd,MAAZ,EAAoBe,GAApB,CAAwB,CAACN,CAAD,EAAIO,GAAJ,kBACrB;AAAQ,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAG,GAAEjB,MAAM,CAACS,CAAD,CAAN,CAAUQ,KAAM;AAA5B,WAAf;AAA0D,UAAA,KAAK,EAAER,CAAjE;AAAA,oBACKA;AADL,WAAqDO,GAArD;AAAA;AAAA;AAAA;AAAA,gBADH,CATL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH;;GArCejB,gB;UACGb,W,EAEMA,W,EAEJC,W;;;MALLY,gB","sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { updateDefaultLabel } from \"./settingsSlice\";\nimport { InputDiv } from \"./index\";\n\nconst DefaultTaskLabelBox = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 80%;\n    height: 70px;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    p {\n        display: inline-block;\n        margin: 0;\n    }\n`;\n\nconst LabelInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border: 0;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    font-size:0.8em;\n    option {\n        font-weight: bold;\n    }\n`;\n\nexport function DefaultTaskLabel() {\n    const labels = useSelector((s) => s.tasks.labels);\n\n    const defaultLabel = useSelector((s) => s.settings.defaultLabel);\n    const [updatedLabel, setUpdatedLabel] = useState(defaultLabel);\n    const dispatch = useDispatch();\n\n    function onBlur(updatedLabel) {\n        updatedLabel = updatedLabel === \"none\" ? null : updatedLabel;\n        dispatch(updateDefaultLabel(updatedLabel));\n    }\n\n    return (\n        <DefaultTaskLabelBox>\n            <div>\n                <p>Default Task Label </p>\n            </div>\n\n            <InputDiv>\n                <LabelInput\n                    name=\"labels\"\n                    onBlur={() => onBlur(updatedLabel)}\n                    defaultValue={updatedLabel}\n                    onChange={(e) => setUpdatedLabel(e.target.value)}\n                    onKeyDown={(e) => (e.key === \"Enter\" ? onBlur(updatedLabel) : null)}\n                >\n                    <option value=\"none\">none</option>\n                    {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n                    {Object.keys(labels).map((e, idx) => (\n                        <option style={{ color: `${labels[e].color}` }} key={idx} value={e}>\n                            {e}\n                        </option>\n                    ))}\n                </LabelInput>\n            </InputDiv>\n        </DefaultTaskLabelBox>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}