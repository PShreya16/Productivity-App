{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fokus2\\\\mini_project_main\\\\src\\\\components\\\\TaskBoard\\\\TaskLabelSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:${p => p.theme.backgroundSecondary};\n    color:${p => p.theme.primaryText};\n    option{\n        font-weight:bold;\n    }\n`;\n_c = TaskSelectInput;\nexport default function TaskLabel(p) {\n  _s();\n\n  const labels = useSelector(s => s.tasks.labels);\n  const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n  return (\n    /*#__PURE__*/\n    // <div style={{ height: \"100%\", width: 80 }}>\n    _jsxDEV(TaskSelectInput, {\n      autoFocus: true,\n      name: \"labels\",\n      onBlur: () => p.onBlur(p.taskId, p.taskLabel, updatedLabel),\n      defaultValue: updatedLabel,\n      onChange: e => setUpdatedLabel(e.target.value),\n      onKeyDown: e => e.key === \"Enter\" ? p.onBlur(p.taskId, p.taskLabel, updatedLabel) : null,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"none\",\n        children: \"none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), Object.keys(labels).map((e, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n        style: {\n          color: `${labels[e].color}`\n        },\n        value: e,\n        children: e\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this) // </div>\n\n  );\n}\n\n_s(TaskLabel, \"VzodE49GiSehTscUNe8t1z9tTZw=\", false, function () {\n  return [useSelector];\n});\n\n_c2 = TaskLabel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskSelectInput\");\n$RefreshReg$(_c2, \"TaskLabel\");","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/components/TaskBoard/TaskLabelSelect.js"],"names":["React","useState","useSelector","useDispatch","styled","TaskSelectInput","select","p","theme","backgroundSecondary","primaryText","TaskLabel","labels","s","tasks","updatedLabel","setUpdatedLabel","taskLabel","onBlur","taskId","e","target","value","key","Object","keys","map","idx","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,eAAe,GAAGD,MAAM,CAACE,MAAO;AACtC;AACA;AACA;AACA,uBAAuBC,CAAC,IAAEA,CAAC,CAACC,KAAF,CAAQC,mBAAoB;AACtD,YAAYF,CAAC,IAAEA,CAAC,CAACC,KAAF,CAAQE,WAAY;AACnC;AACA;AACA;AACA,CATA;KAAML,e;AAWN,eAAe,SAASM,SAAT,CAAmBJ,CAAnB,EAAsB;AAAA;;AACjC,QAAMK,MAAM,GAAGV,WAAW,CAAEW,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQF,MAAhB,CAA1B;AACA,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAACM,CAAC,CAACU,SAAH,CAAhD;AAEA;AAAA;AACI;AACA,YAAC,eAAD;AACA,MAAA,SAAS,MADT;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,MAAM,EAAE,MAAMV,CAAC,CAACW,MAAF,CAASX,CAAC,CAACY,MAAX,EAAkBZ,CAAC,CAACU,SAApB,EAA+BF,YAA/B,CAHlB;AAII,MAAA,YAAY,EAAEA,YAJlB;AAKI,MAAA,QAAQ,EAAGK,CAAD,IAAOJ,eAAe,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CALpC;AAMI,MAAA,SAAS,EAAGF,CAAD,IAAQA,CAAC,CAACG,GAAF,KAAU,OAAV,GAAoBhB,CAAC,CAACW,MAAF,CAASX,CAAC,CAACY,MAAX,EAAkBZ,CAAC,CAACU,SAApB,EAA+BF,YAA/B,CAApB,GAAmE,IAN1F;AAAA,8BAQI;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,EAUKS,MAAM,CAACC,IAAP,CAAYb,MAAZ,EAAoBc,GAApB,CAAwB,CAACN,CAAD,EAAIO,GAAJ,kBACrB;AAAQ,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE,GAAEhB,MAAM,CAACQ,CAAD,CAAN,CAAUQ,KAAM;AAA1B,SAAf;AAAuD,QAAA,KAAK,EAAER,CAA9D;AAAA,kBACKA;AADL,SAAkDO,GAAlD;AAAA;AAAA;AAAA;AAAA,cADH,CAVL;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CAkBI;;AAlBJ;AAoBH;;GAxBuBhB,S;UACLT,W;;;MADKS,S","sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nconst TaskSelectInput = styled.select`\n    font-weight: bold;\n    text-align: center;\n    border:0;\n    background-color:${p=>p.theme.backgroundSecondary};\n    color:${p=>p.theme.primaryText};\n    option{\n        font-weight:bold;\n    }\n`;\n\nexport default function TaskLabel(p) {\n    const labels = useSelector((s) => s.tasks.labels);\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\n\n    return (\n        // <div style={{ height: \"100%\", width: 80 }}>\n        <TaskSelectInput\n        autoFocus\n            name=\"labels\"\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\n            defaultValue={updatedLabel}\n            onChange={(e) => setUpdatedLabel(e.target.value)}\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\n        >\n            <option value=\"none\">none</option> \n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\n            {Object.keys(labels).map((e, idx) => (\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\n                    {e}\n                </option>\n            ))}\n        </TaskSelectInput>\n        // </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}