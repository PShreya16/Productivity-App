{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fokus2\\\\mini_project_main\\\\src\\\\components\\\\TaskBoard\\\\TaskInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TaskFeedback } from \"./TaskFeedback\";\nimport { debounce } from \"../../helpers\";\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0 10px 0;\n    width: 90%;\n    max-width: 396px;\n    border-radius: 10px;\n    background-color: ${p => p.theme.backgroundSecondary};\n    height: 50px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n`;\n_c = TaskInputContainer;\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #fabb18;\n    }\n`;\n_c2 = TaskContentInputDiv;\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: ${p => p.theme.backgroundSecondary};\n    color: ${p => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n_c3 = TaskContentInputField;\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.7em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #fabb18;\n    }\n`;\n_c4 = TaskTimeInputDiv;\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: ${p => p.theme.backgroundSecondary};\n    color: ${p => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n        input[type=\"number\"] { \n        -moz-appearance: textfield;   \n    }\n`;\n_c5 = TaskTimeInputField;\nexport default function TaskInput() {\n  _s();\n\n  const defaultTime = useSelector(s => s.settings.defaultTime);\n  const defaultLabel = useSelector(s => s.settings.defaultLabel);\n  const [task, setTask] = useState(\"\");\n  const [time, setTime] = useState(defaultTime);\n  const [generateFeedbackForTask, setGenerateFeedbackForTask] = useState(undefined);\n  const [generateFeedbackForTime, setGenerateFeedbackForTime] = useState(undefined);\n  const [isInputValid, setInputValid] = useState(false);\n  let taskContentInputRef, taskTimeInputRef;\n  const meta = useSelector(s => s.tasks.meta);\n  const labels = useSelector(s => s.tasks.labels);\n  const dispatch = useDispatch();\n\n  function submitTask(e) {\n    if (e.key === \"Enter\" && task.trim().length >= 1 && isInputValid) {\n      let temp = task.trim().split(\" \"); // add a max time limit\n\n      let taskTime = time;\n      let label = defaultLabel;\n\n      if (temp.length !== 1) {\n        if (!isNaN(parseInt(temp[temp.length - 1]))) {\n          taskTime = parseInt(temp.pop());\n        } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n          let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n          let found = false;\n\n          for (let validLabel in labels) {\n            found = validLabel.includes(userLabel);\n            console.log(userLabel, validLabel);\n\n            if (found) {\n              label = validLabel;\n              temp.pop();\n              break;\n            }\n          }\n        }\n      }\n\n      temp = temp.join(\" \");\n      let newTask = {\n        id: Math.floor(Math.random() * 10000),\n        globalKey: meta.globalKey,\n        content: temp,\n        time: taskTime,\n        remainingTime: taskTime,\n        isRunning: false,\n        isCompleted: false,\n        createdAt: new Date().toISOString(),\n        label: label\n      };\n      if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n      dispatch(create(newTask));\n      dispatch(incrementGlobalKey());\n      if (label !== null) dispatch(updateLabelCount({\n        oldLabel: null,\n        newLabel: label\n      }));\n      setTask(\"\");\n      setTime(defaultTime);\n      taskContentInputRef.value = \"\";\n      taskTimeInputRef.value = \"\";\n      taskContentInputRef.focus();\n    }\n  }\n\n  const debouncedGenerateInputFeedback = useCallback(debounce((task, time) => {\n    if (task !== undefined) setGenerateFeedbackForTask(task);\n    if (time !== undefined) setGenerateFeedbackForTime(time);\n  }, 150), []);\n\n  function onTaskInputChangeHandler(task) {\n    setTask(task);\n    debouncedGenerateInputFeedback(task, undefined);\n  }\n\n  function onTimeInputChangeHandler(time) {\n    setTime(time);\n    debouncedGenerateInputFeedback(undefined, time);\n  } // improve logic - both onKeyDown and onChange executing - combining will be better.\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TaskInputContainer, {\n      children: [/*#__PURE__*/_jsxDEV(TaskContentInputDiv, {\n        children: [/*#__PURE__*/_jsxDEV(AiFillPlusCircle, {\n          onClick: () => taskContentInputRef.focus()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TaskContentInputField, {\n          type: \"text\",\n          placeholder: \"i have to focus on ...\",\n          ref: el => taskContentInputRef = el,\n          onChange: e => onTaskInputChangeHandler(e.target.value),\n          onKeyDown: submitTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TaskTimeInputDiv, {\n        children: [/*#__PURE__*/_jsxDEV(AiFillClockCircle, {\n          onClick: () => taskTimeInputRef.focus()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TaskTimeInputField, {\n          type: \"number\",\n          placeholder: defaultTime,\n          ref: el => taskTimeInputRef = el,\n          onChange: e => onTimeInputChangeHandler(e.target.value),\n          onKeyDown: submitTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"mins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskFeedback, {\n      task: generateFeedbackForTask,\n      time: generateFeedbackForTime,\n      setInputValid: setInputValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TaskInput, \"Po0fiNKpSBrMowBx1vCEOSqhbOA=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c6 = TaskInput;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"TaskInputContainer\");\n$RefreshReg$(_c2, \"TaskContentInputDiv\");\n$RefreshReg$(_c3, \"TaskContentInputField\");\n$RefreshReg$(_c4, \"TaskTimeInputDiv\");\n$RefreshReg$(_c5, \"TaskTimeInputField\");\n$RefreshReg$(_c6, \"TaskInput\");","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/components/TaskBoard/TaskInput.js"],"names":["React","useCallback","useState","useDispatch","useSelector","create","incrementGlobalKey","focusOnTask","updateLabelCount","styled","AiFillPlusCircle","AiFillClockCircle","TaskFeedback","debounce","TaskInputContainer","div","p","theme","backgroundSecondary","TaskContentInputDiv","TaskContentInputField","input","primaryText","TaskTimeInputDiv","TaskTimeInputField","TaskInput","defaultTime","s","settings","defaultLabel","task","setTask","time","setTime","generateFeedbackForTask","setGenerateFeedbackForTask","undefined","generateFeedbackForTime","setGenerateFeedbackForTime","isInputValid","setInputValid","taskContentInputRef","taskTimeInputRef","meta","tasks","labels","dispatch","submitTask","e","key","trim","length","temp","split","taskTime","label","isNaN","parseInt","pop","includes","userLabel","substring","toLowerCase","found","validLabel","console","log","join","newTask","id","Math","floor","random","globalKey","content","remainingTime","isRunning","isCompleted","createdAt","Date","toISOString","focussedTaskIndex","oldLabel","newLabel","value","focus","debouncedGenerateInputFeedback","onTaskInputChangeHandler","onTimeInputChangeHandler","el","target"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport styled from \"styled-components\";\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\nimport { TaskFeedback } from \"./TaskFeedback\";\nimport { debounce } from \"../../helpers\";\n\nconst TaskInputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin: 20px 0 10px 0;\n    width: 90%;\n    max-width: 396px;\n    border-radius: 10px;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    height: 50px;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\n`;\n\nconst TaskContentInputDiv = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 90%;\n    width: 70%;\n    margin-left: 10px;\n    svg {\n        font-size: 1.3em;\n        margin-right: 5px;\n        color: #fabb18;\n    }\n`;\n\nconst TaskContentInputField = styled.input`\n    height: 100%;\n    width: 90%;\n    font-size: 0.9em;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n`;\n\nconst TaskTimeInputDiv = styled.div`\n    display: flex;\n    align-items: center;\n    height: 90%;\n    width: 25%;\n    color: #c1c1d7;\n    span {\n        font-size: 0.7em;\n        font-weight: bold;\n    }\n    svg {\n        font-size: 1.2em;\n        color: #fabb18;\n    }\n`;\n\nconst TaskTimeInputField = styled.input`\n    height: 100%;\n    width: 30%;\n    font-size: 0.9em;\n    text-align: center;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    border: 0;\n    outline: none;\n    font-weight: bold;\n    &::placeholder {\n        color: #c1c1d7;\n    }\n    &::-webkit-inner-spin-button,\n    &::-webkit-outer-spin-button {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        margin: 0;\n    }\n        input[type=\"number\"] { \n        -moz-appearance: textfield;   \n    }\n`;\n\nexport default function TaskInput() {\n\n    const defaultTime = useSelector((s) => s.settings.defaultTime);\n    const defaultLabel = useSelector((s) => s.settings.defaultLabel);\n\n    const [task, setTask] = useState(\"\");\n    const [time, setTime] = useState(defaultTime);\n\n    const [generateFeedbackForTask, setGenerateFeedbackForTask] = useState(undefined);\n    const [generateFeedbackForTime, setGenerateFeedbackForTime] = useState(undefined);\n    const [isInputValid,setInputValid] = useState(false);\n\n    let taskContentInputRef, taskTimeInputRef;\n    const meta = useSelector((s) => s.tasks.meta);\n    const labels = useSelector((s) => s.tasks.labels);\n    const dispatch = useDispatch();\n\n    function submitTask(e) {\n        if (e.key === \"Enter\" && task.trim().length >= 1 && isInputValid) {\n            let temp = task.trim().split(\" \");\n            // add a max time limit\n            let taskTime = time;\n            let label = defaultLabel;\n            if (temp.length !== 1) {\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\n                    taskTime = parseInt(temp.pop());\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\n                    let found = false;\n                    for (let validLabel in labels) {\n                        found = validLabel.includes(userLabel);\n                        console.log(userLabel, validLabel);\n                        if (found) {\n                            label = validLabel;\n                            temp.pop();\n                            break;\n                        }\n                    }\n                }\n            }\n\n            temp = temp.join(\" \");\n            let newTask = {\n                id: Math.floor(Math.random() * 10000),\n                globalKey: meta.globalKey,\n                content: temp,\n                time: taskTime,\n                remainingTime: taskTime,\n                isRunning: false,\n                isCompleted: false,\n                createdAt: new Date().toISOString(),\n                label: label,\n            };\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\n            dispatch(create(newTask));\n            dispatch(incrementGlobalKey());\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\n            setTask(\"\");\n            setTime(defaultTime);\n            taskContentInputRef.value = \"\";\n            taskTimeInputRef.value = \"\";\n            taskContentInputRef.focus();\n        }\n    }\n\n    const debouncedGenerateInputFeedback = useCallback(\n        debounce((task, time) => {\n            if (task !== undefined) setGenerateFeedbackForTask(task);\n            if (time !== undefined) setGenerateFeedbackForTime(time);\n        }, 150),\n        []\n    );\n\n    function onTaskInputChangeHandler(task) {\n        setTask(task);\n        debouncedGenerateInputFeedback(task, undefined);\n    }\n\n    function onTimeInputChangeHandler(time) {\n        setTime(time);\n        debouncedGenerateInputFeedback(undefined, time);\n    }\n\n    // improve logic - both onKeyDown and onChange executing - combining will be better.\n    return (\n        <>\n            <TaskInputContainer>\n                <TaskContentInputDiv>\n                    <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\n                    <TaskContentInputField\n                        type=\"text\"\n                        placeholder=\"i have to focus on ...\"\n                        ref={(el) => (taskContentInputRef = el)}\n                        onChange={(e) => onTaskInputChangeHandler(e.target.value)}\n                        onKeyDown={submitTask}\n                    />\n                </TaskContentInputDiv>\n                <TaskTimeInputDiv>\n                    <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\n                    <TaskTimeInputField\n                        type=\"number\"\n                        placeholder={defaultTime}\n                        ref={(el) => (taskTimeInputRef = el)}\n                        onChange={(e) => onTimeInputChangeHandler(e.target.value)}\n                        onKeyDown={submitTask}\n                    />\n                    <span>mins</span>\n                </TaskTimeInputDiv>\n            </TaskInputContainer>\n            <TaskFeedback task={generateFeedbackForTask} time={generateFeedbackForTime} setInputValid={setInputValid}/>\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}