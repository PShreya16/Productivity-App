{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fokus2\\\\mini_project_main\\\\src\\\\components\\\\TaskBoard\\\\TaskFeedback.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { debounce, getFormattedListTimeSummary } from \"../../helpers\";\nimport { FaClock } from \"react-icons/fa\";\nconst TaskFeedbackContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 80%;\n    margin: 0 0 10px 0;\n`;\n_c = TaskFeedbackContainer;\nconst RemainingTaskListTimeDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color:${p => p.theme.primaryText};\n    p {\n        margin: 0 3px;\n        font-weight: bold;\n        font-size: 0.8em;\n    }\n    svg {\n        font-size: 0.8em;\n        margin: 0 3px;\n    }\n    span {\n        margin: 0 2px;\n        font-size: 0.8em;\n    }\n`;\n_c2 = RemainingTaskListTimeDiv;\nconst ErrorMessage = styled.div`\n    display: flex;\n    align-items: center;\n    color: red;\n    p {\n        margin: 0;\n        font-size: 0.8em;\n    }\n`;\n_c3 = ErrorMessage;\nexport function TaskFeedback({\n  task,\n  time,\n  setInputValid\n}) {\n  _s();\n\n  let [error, setError] = useState(undefined);\n  useEffect(() => {\n    let errorGenerated = false;\n\n    if (task !== undefined) {\n      var _temp, _temp2, _temp3, _temp4;\n\n      // if time is there, it should be stripped and validated first before the actual task content\n      let temp = task === null || task === void 0 ? void 0 : task.trim().split(\" \");\n\n      if (temp !== undefined && !isNaN(parseInt(temp[temp.length - 1]))) {\n        let taskTime = parseInt(temp.pop());\n\n        if (taskTime <= 0) {\n          setError(\"Hmmm. Time for this task seems weird,no?\");\n          errorGenerated = true;\n          setInputValid(false);\n          return;\n        } else if (taskTime > 120) {\n          setError(\"Time should be <120mins for better focus !\");\n          errorGenerated = true;\n          setInputValid(false);\n          return;\n        }\n      }\n\n      temp = (_temp = temp) === null || _temp === void 0 ? void 0 : _temp.join(\" \");\n\n      if (((_temp2 = temp) === null || _temp2 === void 0 ? void 0 : _temp2.length) === 0) {\n        setError(undefined);\n        errorGenerated = true;\n        setInputValid(false);\n      } else if (((_temp3 = temp) === null || _temp3 === void 0 ? void 0 : _temp3.length) < 3) {\n        setError(\"Task should be atleast 3 characters long.\");\n        errorGenerated = true;\n        setInputValid(false);\n      } else if (((_temp4 = temp) === null || _temp4 === void 0 ? void 0 : _temp4.length) > 100) {\n        setError(\"Hey, that's too long. Keep it short and simple.\");\n        errorGenerated = true;\n        setInputValid(false);\n      } else {\n        setError(undefined);\n        setInputValid(true);\n      }\n    }\n\n    if (!errorGenerated) {\n      // will check for error in time only if no error in task\n      if (time !== undefined && time !== \"\") {\n        let numericTime = parseInt(time);\n\n        if (numericTime <= 0 || numericTime > 120) {\n          setError(\"Time should be between 1-120 mins\");\n          setInputValid(false);\n        } else {\n          setError(undefined);\n          setInputValid(true);\n        }\n      }\n    }\n  }, [task, time, setInputValid]);\n  const remainingTaskListTime = useSelector(s => s.tasks.meta.remainingTaskListTime);\n  const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\n  let rTLTHours = rTLTObj.hours;\n  let rTLTMins = rTLTObj.mins;\n  return /*#__PURE__*/_jsxDEV(TaskFeedbackContainer, {\n    children: error === undefined ? /*#__PURE__*/_jsxDEV(RemainingTaskListTimeDiv, {\n      children: remainingTaskListTime === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Create New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(FaClock, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"list time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }, this), rTLTHours !== \"0\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [rTLTHours, \"h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 51\n        }, this), rTLTMins !== \"00\" && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [rTLTMins, \"m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 51\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TaskFeedback, \"KKR+AiUMP/pXenMZHkpzv6e8Vj4=\", false, function () {\n  return [useSelector];\n});\n\n_c4 = TaskFeedback;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"TaskFeedbackContainer\");\n$RefreshReg$(_c2, \"RemainingTaskListTimeDiv\");\n$RefreshReg$(_c3, \"ErrorMessage\");\n$RefreshReg$(_c4, \"TaskFeedback\");","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/components/TaskBoard/TaskFeedback.js"],"names":["React","useEffect","useState","useSelector","styled","debounce","getFormattedListTimeSummary","FaClock","TaskFeedbackContainer","div","RemainingTaskListTimeDiv","p","theme","primaryText","ErrorMessage","TaskFeedback","task","time","setInputValid","error","setError","undefined","errorGenerated","temp","trim","split","isNaN","parseInt","length","taskTime","pop","join","numericTime","remainingTaskListTime","s","tasks","meta","rTLTObj","rTLTHours","hours","rTLTMins","mins"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { debounce, getFormattedListTimeSummary } from \"../../helpers\";\nimport { FaClock } from \"react-icons/fa\";\n\nconst TaskFeedbackContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 80%;\n    margin: 0 0 10px 0;\n`;\n\nconst RemainingTaskListTimeDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color:${p=>p.theme.primaryText};\n    p {\n        margin: 0 3px;\n        font-weight: bold;\n        font-size: 0.8em;\n    }\n    svg {\n        font-size: 0.8em;\n        margin: 0 3px;\n    }\n    span {\n        margin: 0 2px;\n        font-size: 0.8em;\n    }\n`;\n\nconst ErrorMessage = styled.div`\n    display: flex;\n    align-items: center;\n    color: red;\n    p {\n        margin: 0;\n        font-size: 0.8em;\n    }\n`;\n\nexport function TaskFeedback({ task, time, setInputValid }) {\n    let [error, setError] = useState(undefined);\n\n    useEffect(() => {\n        let errorGenerated = false;\n        if (task !== undefined) {\n            // if time is there, it should be stripped and validated first before the actual task content\n            let temp = task?.trim().split(\" \");\n            if (temp !== undefined && !isNaN(parseInt(temp[temp.length - 1]))) {\n                let taskTime = parseInt(temp.pop());\n                if (taskTime <= 0) {\n                    setError(\"Hmmm. Time for this task seems weird,no?\");\n                    errorGenerated = true;\n                    setInputValid(false);\n                    return;\n                } else if (taskTime > 120) {\n                    setError(\"Time should be <120mins for better focus !\");\n                    errorGenerated = true;\n                    setInputValid(false);\n                    return;\n                }\n            }\n            temp = temp?.join(\" \");\n\n            if (temp?.length === 0) {\n                setError(undefined);\n                errorGenerated = true;\n                setInputValid(false);\n            } else if (temp?.length < 3) {\n                setError(\"Task should be atleast 3 characters long.\");\n                errorGenerated = true;\n                setInputValid(false);\n            } else if (temp?.length > 100) {\n                setError(\"Hey, that's too long. Keep it short and simple.\");\n                errorGenerated = true;\n                setInputValid(false);\n            } else {\n                setError(undefined);\n                setInputValid(true);\n            }\n        }\n\n        if (!errorGenerated) {\n            // will check for error in time only if no error in task\n            if (time !== undefined && time !== \"\") {\n                let numericTime = parseInt(time);\n                if (numericTime <= 0 || numericTime > 120) {\n                    setError(\"Time should be between 1-120 mins\");\n                    setInputValid(false);\n                } else {\n                    setError(undefined);\n                    setInputValid(true);\n                }\n            }\n        }\n    }, [task, time, setInputValid]);\n\n    const remainingTaskListTime = useSelector((s) => s.tasks.meta.remainingTaskListTime);\n    const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\n    let rTLTHours = rTLTObj.hours;\n    let rTLTMins = rTLTObj.mins;\n\n    return (\n        <TaskFeedbackContainer>\n            {error === undefined ? (\n                <RemainingTaskListTimeDiv>\n                    {remainingTaskListTime === 0 ? (\n                        <p>Create New Task</p>\n                    ) : (\n                        <>\n                            <FaClock />\n                            <p>list time:</p>\n                            {rTLTHours !== \"0\" && <span>{rTLTHours}h</span>}\n                            {rTLTMins !== \"00\" && <span>{rTLTMins}m</span>}\n                        </>\n                    )}\n                </RemainingTaskListTimeDiv>\n            ) : (\n                <ErrorMessage>\n                    <p>{error}</p>\n                </ErrorMessage>\n            )}\n        </TaskFeedbackContainer>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}