{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const colorOptions = {\n  pink: \"#FFF0F5\",\n  green: \"#D0F0C0\",\n  blue: \"#E0FFFF\",\n  white: \"#FFFFFF\"\n};\nexport const notesSlice = createSlice({\n  name: \"notes\",\n  initialState: {\n    notesArray: [],\n    meta: {\n      globalKey: 0,\n      totalNoteCount: 0\n    }\n  },\n  reducers: {\n    create: (notes, {\n      payload\n    }) => {\n      notes.meta.totalNoteCount++;\n      notes.meta.globalKey++;\n      notes.notesArray.unshift(payload);\n    },\n    update: ({\n      notesArray\n    }, {\n      payload\n    }) => {\n      notesArray.forEach(i => {\n        if (i.id === payload.id) {\n          i.content = payload.noteContent !== undefined ? payload.noteContent : i.content;\n          i.color = payload.noteColor !== undefined ? payload.noteColor : i.color;\n          i.updatedAt = new Date().toISOString();\n        }\n      });\n    },\n    remove: (notes, {\n      payload\n    }) => {\n      notes.notesArray = notes.notesArray.filter(i => {\n        if (i.id !== payload && i.content.trim().length !== 0) return true;else return false;\n      });\n      notes.meta.totalNoteCount = notes.notesArray.length;\n    }\n  }\n});\nexport const {\n  create,\n  update,\n  remove\n} = notesSlice.actions;\nexport default notesSlice.reducer;","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/containers/notes/notesSlice.js"],"names":["createSlice","colorOptions","pink","green","blue","white","notesSlice","name","initialState","notesArray","meta","globalKey","totalNoteCount","reducers","create","notes","payload","unshift","update","forEach","i","id","content","noteContent","undefined","color","noteColor","updatedAt","Date","toISOString","remove","filter","trim","length","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,IAAI,EAAE,SADkB;AAExBC,EAAAA,KAAK,EAAE,SAFiB;AAGxBC,EAAAA,IAAI,EAAE,SAHkB;AAIxBC,EAAAA,KAAK,EAAE;AAJiB,CAArB;AAOP,OAAO,MAAMC,UAAU,GAAGN,WAAW,CAAC;AAClCO,EAAAA,IAAI,EAAE,OAD4B;AAElCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAE,EADF;AAEVC,IAAAA,IAAI,EAAE;AACFC,MAAAA,SAAS,EAAE,CADT;AAEFC,MAAAA,cAAc,EAAE;AAFd;AAFI,GAFoB;AASlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC5BD,MAAAA,KAAK,CAACL,IAAN,CAAWE,cAAX;AACAG,MAAAA,KAAK,CAACL,IAAN,CAAWC,SAAX;AACAI,MAAAA,KAAK,CAACN,UAAN,CAAiBQ,OAAjB,CAAyBD,OAAzB;AACH,KALK;AAMNE,IAAAA,MAAM,EAAE,CAAC;AAAET,MAAAA;AAAF,KAAD,EAAiB;AAAEO,MAAAA;AAAF,KAAjB,KAAiC;AACrCP,MAAAA,UAAU,CAACU,OAAX,CAAoBC,CAAD,IAAO;AACtB,YAAIA,CAAC,CAACC,EAAF,KAASL,OAAO,CAACK,EAArB,EAAyB;AACrBD,UAAAA,CAAC,CAACE,OAAF,GAAYN,OAAO,CAACO,WAAR,KAAwBC,SAAxB,GAAoCR,OAAO,CAACO,WAA5C,GAA0DH,CAAC,CAACE,OAAxE;AACAF,UAAAA,CAAC,CAACK,KAAF,GAAUT,OAAO,CAACU,SAAR,KAAsBF,SAAtB,GAAkCR,OAAO,CAACU,SAA1C,GAAsDN,CAAC,CAACK,KAAlE;AACAL,UAAAA,CAAC,CAACO,SAAF,GAAc,IAAIC,IAAJ,GAAWC,WAAX,EAAd;AACH;AACJ,OAND;AAOH,KAdK;AAeNC,IAAAA,MAAM,EAAE,CAACf,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC5BD,MAAAA,KAAK,CAACN,UAAN,GAAmBM,KAAK,CAACN,UAAN,CAAiBsB,MAAjB,CAAyBX,CAAD,IAAO;AAC9C,YAAIA,CAAC,CAACC,EAAF,KAASL,OAAT,IAAoBI,CAAC,CAACE,OAAF,CAAUU,IAAV,GAAiBC,MAAjB,KAA4B,CAApD,EAAuD,OAAO,IAAP,CAAvD,KACK,OAAO,KAAP;AACR,OAHkB,CAAnB;AAIAlB,MAAAA,KAAK,CAACL,IAAN,CAAWE,cAAX,GAA4BG,KAAK,CAACN,UAAN,CAAiBwB,MAA7C;AACH;AArBK;AATwB,CAAD,CAA9B;AAkCP,OAAO,MAAM;AAAEnB,EAAAA,MAAF;AAAUI,EAAAA,MAAV;AAAkBY,EAAAA;AAAlB,IAA6BxB,UAAU,CAAC4B,OAA9C;AAEP,eAAe5B,UAAU,CAAC6B,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const colorOptions = {\n    pink: \"#FFF0F5\",\n    green: \"#D0F0C0\",\n    blue: \"#E0FFFF\",\n    white: \"#FFFFFF\",\n};\n\nexport const notesSlice = createSlice({\n    name: \"notes\",\n    initialState: {\n        notesArray: [],\n        meta: {\n            globalKey: 0,\n            totalNoteCount: 0,\n        },\n    },\n    reducers: {\n        create: (notes, { payload }) => {\n            notes.meta.totalNoteCount++;\n            notes.meta.globalKey++;\n            notes.notesArray.unshift(payload);\n        },\n        update: ({ notesArray }, { payload }) => {\n            notesArray.forEach((i) => {\n                if (i.id === payload.id) {\n                    i.content = payload.noteContent !== undefined ? payload.noteContent : i.content;\n                    i.color = payload.noteColor !== undefined ? payload.noteColor : i.color;\n                    i.updatedAt = new Date().toISOString();\n                }\n            });\n        },\n        remove: (notes, { payload }) => {\n            notes.notesArray = notes.notesArray.filter((i) => {\n                if (i.id !== payload && i.content.trim().length !== 0) return true;\n                else return false;\n            });\n            notes.meta.totalNoteCount = notes.notesArray.length;\n        },\n    },\n});\n\nexport const { create, update, remove } = notesSlice.actions;\n\nexport default notesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}