{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fokus2\\\\mini_project_main\\\\src\\\\components\\\\FocusBoard\\\\FocussedTask.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { toggleIsRunning, tick, updateTaskTimeByVal, resetTaskTimer, toggleSoundscapeState, toggleIsCompleted, resetFocussedTask, rearrange } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { FaClipboardCheck } from \"react-icons/fa\";\nimport { formattedTimeStringv2, updatePageTitle } from \"./../../helpers\";\nimport { MIN_TO_MS } from \"../../helpers/constants\";\nimport ReactTooltip from \"react-tooltip\";\nlet dingSoundElement = new Audio(dingSound);\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    background-color: #fabb18;\n    width: 100%;\n    height: 100%;\n    border-radius: 20px;\n`;\n_c = FocussedTaskDiv;\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 55%;\n    /* background-color: red; */\n`;\n_c2 = FocussedTaskPlayer;\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    border: 3px solid black;\n    word-wrap: break-word;\n    background-color: ${p => p.theme.backgroundSecondary};\n    color: ${p => p.theme.primaryText};\n    text-shadow: 0 0 4px rgb(248, 185, 23, 0.4);\n    p {\n        min-width: 0;\n        font-weight: bold;\n        font-size: 0.9em;\n        margin: 3px;\n    }\n    position: relative;\n    /* -webkit-box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\n    box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8); */\n`;\n_c3 = FocussedTaskContent;\nconst TotalTaskTimeBadge = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    border-radius: 3px;\n    p {\n        font-size: 0.7em;\n        color: ${p => p.theme.secondaryText};\n        margin: 3px 5px;\n    }\n    background-color: #fabb18;\n    position: absolute;\n    top: 3px;\n    right: 3px;\n    opacity: 0.6;\n    &:hover {\n        opacity: 1;\n    }\n`;\n_c4 = TotalTaskTimeBadge;\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n_c5 = FocussedTaskTimer;\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: ${p => p.theme.type === \"l\" ? \"#FFF\" : \"#FFE39E\"};\n    color: #000;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    font-weight: bold;\n    p {\n        margin: 0;\n        font-size: 0.9em;\n    }\n    span {\n        margin: 0 2px;\n        font-size: 0.7em;\n    }\n`;\n_c6 = CountdownTimerDiv;\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n_c7 = FocussedTaskController;\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #fabb18;\n        font-size: 1.5em;\n        margin-left: ${p => p.isPlayBtn ? \"3px\" : \"0\"};\n    }\n    cursor: pointer;\n`;\n_c8 = PlayPauseButtonDiv;\nconst TaskCompletedDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 45px;\n    height: 45px;\n    margin: 10px 20px;\n    svg {\n        color: ${p => p.theme.secondaryText};\n        font-size: 2em;\n    }\n`;\n_c9 = TaskCompletedDiv;\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 25px;\n    height: 25px;\n    cursor: ${p => p.isDisabled ? \"default\" : \"pointer\"};\n    color: ${p => p.isDisabled ? \"#777672\" : \"#000\"};\n`;\n_c10 = UpdateTimeButtonDiv;\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    left: 7px;\n    cursor: pointer;\n    background-color: #000;\n    svg {\n        color: #fabb18;\n        width: 20px;\n    }\n`;\n_c11 = ResetButtonDiv;\nexport function FocussedTask() {\n  _s();\n\n  const focussedTaskIndex = useSelector(state => state.tasks.meta.focussedTaskIndex);\n  const autoCompleteZeroTimeTask = useSelector(s => s.settings.autoCompleteZeroTimeTask);\n  let focussedTask = useSelector(state => focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null);\n  const dispatch = useDispatch();\n  const delay = 1010; // to account for the delay in executing code.\n\n  useTimer(deltaMS => {\n    if (focussedTask === null) return;else if (focussedTask.remainingTime > 0) {\n      dispatch(tick({\n        focussedTaskIndex,\n        deltaMS\n      }));\n    } else if (focussedTask.remainingTime === 0) {\n      dingSoundElement.play();\n      if (document.hidden) updatePageTitle(`Fokus: TIMER UP!!!`);\n      dispatch(toggleSoundscapeState(false));\n      dispatch(toggleIsRunning({\n        idx: focussedTaskIndex\n      }));\n\n      if (autoCompleteZeroTimeTask) {\n        dispatch(resetFocussedTask());\n        dispatch(toggleIsCompleted(focussedTask.id));\n        dispatch(rearrange({\n          id: focussedTask.id,\n          markedAsComplete: true\n        }));\n      }\n    }\n  }, focussedTask !== null && focussedTask.isRunning ? delay : null);\n\n  function updateTaskTimeHandler(val) {\n    if (focussedTask.time + val * MIN_TO_MS < 0) return;\n    if (focussedTask.time + val * MIN_TO_MS > 120 * MIN_TO_MS) return;\n    if (focussedTask.isRunning) dispatch(toggleIsRunning({\n      idx: focussedTaskIndex\n    }));\n    dispatch(updateTaskTimeByVal({\n      focussedTaskIndex,\n      val\n    }));\n    dispatch(toggleSoundscapeState(false));\n  }\n\n  function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n    dispatch(toggleIsRunning({\n      idx: focussedTaskIndex\n    }));\n\n    if (wasTaskRunning) {\n      updatePageTitle(\"Fokus\");\n      dispatch(toggleSoundscapeState(false));\n    } else {\n      updatePageTitle(`Fokus: ${focussedTask.content}`);\n      dispatch(toggleSoundscapeState(true));\n    }\n  }\n\n  const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\n  let countdownMins = countdownObj.mins;\n  let countdownSecs = countdownObj.secs;\n  const totalTaskTimeObj = formattedTimeStringv2(focussedTask.time);\n  let totalTaskMins = totalTaskTimeObj.mins;\n  return /*#__PURE__*/_jsxDEV(FocussedTaskDiv, {\n    children: [/*#__PURE__*/_jsxDEV(FocussedTaskPlayer, {\n      children: [/*#__PURE__*/_jsxDEV(FocussedTaskTimer, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: 100,\n            height: 100\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgressbarWithChildren, {\n            value: focussedTask.time !== 0 ? Math.floor(focussedTask.remainingTime / focussedTask.time * 100) : 0,\n            styles: buildStyles({\n              strokeLinecap: \"butt\",\n              pathColor: \"#121212\",\n              trailColor: \"#F0F8FF\"\n            }),\n            strokeWidth: 9,\n            children: /*#__PURE__*/_jsxDEV(CountdownTimerDiv, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: countdownMins\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"m\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: countdownSecs\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"s\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FocussedTaskController, {\n        children: [/*#__PURE__*/_jsxDEV(UpdateTimeButtonDiv, {\n          isDisabled: focussedTask.time + 5 * MIN_TO_MS > 120 * MIN_TO_MS,\n          onClick: () => updateTaskTimeHandler(5),\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"+5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this), focussedTask.remainingTime !== 0 ? /*#__PURE__*/_jsxDEV(PlayPauseButtonDiv, {\n          isPlayBtn: !focussedTask.isRunning,\n          onClick: () => playPauseHandler(focussedTaskIndex, focussedTask.isRunning),\n          children: focussedTask.isRunning ? /*#__PURE__*/_jsxDEV(BsFillPauseFill, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 55\n          }, this) : /*#__PURE__*/_jsxDEV(BsFillPlayFill, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 77\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(TaskCompletedDiv, {\n          \"data-tip\": \"\",\n          \"data-for\": \"taskCompleted\",\n          children: [/*#__PURE__*/_jsxDEV(FaClipboardCheck, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n            id: \"taskCompleted\",\n            getContent: () => \"Task Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(UpdateTimeButtonDiv, {\n          isDisabled: focussedTask.time - 5 * MIN_TO_MS < 0,\n          onClick: () => updateTaskTimeHandler(-5),\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ResetButtonDiv, {\n        onClick: () => {\n          dispatch(toggleSoundscapeState(false));\n          dispatch(resetTaskTimer(focussedTaskIndex));\n        },\n        \"data-for\": \"reset\",\n        \"data-tip\": \"\",\n        children: [/*#__PURE__*/_jsxDEV(ResetIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n          id: \"reset\",\n          getContent: () => \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FocussedTaskContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: focussedTask.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TotalTaskTimeBadge, {\n        \"data-tip\": \"\",\n        \"data-for\": \"totalTimeBadge\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [totalTaskMins, \"m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ReactTooltip, {\n          id: \"totalTimeBadge\",\n          getContent: () => \"Task's total time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FocussedTask, \"LojZqmWhA1wWid1cLuyp0DeoBWE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useTimer];\n});\n\n_c12 = FocussedTask;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n\n$RefreshReg$(_c, \"FocussedTaskDiv\");\n$RefreshReg$(_c2, \"FocussedTaskPlayer\");\n$RefreshReg$(_c3, \"FocussedTaskContent\");\n$RefreshReg$(_c4, \"TotalTaskTimeBadge\");\n$RefreshReg$(_c5, \"FocussedTaskTimer\");\n$RefreshReg$(_c6, \"CountdownTimerDiv\");\n$RefreshReg$(_c7, \"FocussedTaskController\");\n$RefreshReg$(_c8, \"PlayPauseButtonDiv\");\n$RefreshReg$(_c9, \"TaskCompletedDiv\");\n$RefreshReg$(_c10, \"UpdateTimeButtonDiv\");\n$RefreshReg$(_c11, \"ResetButtonDiv\");\n$RefreshReg$(_c12, \"FocussedTask\");","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/components/FocusBoard/FocussedTask.js"],"names":["React","useSelector","useDispatch","styled","toggleIsRunning","tick","updateTaskTimeByVal","resetTaskTimer","toggleSoundscapeState","toggleIsCompleted","resetFocussedTask","rearrange","useTimer","CircularProgressbarWithChildren","buildStyles","ResetIcon","dingSound","BsFillPauseFill","BsFillPlayFill","FaClipboardCheck","formattedTimeStringv2","updatePageTitle","MIN_TO_MS","ReactTooltip","dingSoundElement","Audio","FocussedTaskDiv","div","FocussedTaskPlayer","FocussedTaskContent","p","theme","backgroundSecondary","primaryText","TotalTaskTimeBadge","secondaryText","FocussedTaskTimer","CountdownTimerDiv","type","FocussedTaskController","PlayPauseButtonDiv","isPlayBtn","TaskCompletedDiv","UpdateTimeButtonDiv","isDisabled","ResetButtonDiv","FocussedTask","focussedTaskIndex","state","tasks","meta","autoCompleteZeroTimeTask","s","settings","focussedTask","taskArray","dispatch","delay","deltaMS","remainingTime","play","document","hidden","idx","id","markedAsComplete","isRunning","updateTaskTimeHandler","val","time","playPauseHandler","wasTaskRunning","content","countdownObj","countdownMins","mins","countdownSecs","secs","totalTaskTimeObj","totalTaskMins","width","height","Math","floor","strokeLinecap","pathColor","trailColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport {\n    toggleIsRunning,\n    tick,\n    updateTaskTimeByVal,\n    resetTaskTimer,\n    toggleSoundscapeState,\n    toggleIsCompleted,\n    resetFocussedTask,\n    rearrange,\n} from \"./../../containers/taskBoard/taskBoardSlice\";\nimport useTimer from \"../../hooks/useTimer\";\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { ResetIcon } from \"./../../components/customIcons\";\nimport dingSound from \"./../../sounds/ding.mp3\";\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\nimport { FaClipboardCheck } from \"react-icons/fa\";\nimport { formattedTimeStringv2, updatePageTitle } from \"./../../helpers\";\nimport { MIN_TO_MS } from \"../../helpers/constants\";\nimport ReactTooltip from \"react-tooltip\";\n\nlet dingSoundElement = new Audio(dingSound);\n\nconst FocussedTaskDiv = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    position: relative;\n    background-color: #fabb18;\n    width: 100%;\n    height: 100%;\n    border-radius: 20px;\n`;\n\nconst FocussedTaskPlayer = styled.div`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 55%;\n    /* background-color: red; */\n`;\n\nconst FocussedTaskContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    text-align: center;\n    padding: 5px;\n    height: 30%;\n    width: 90%;\n    max-width: 376px;\n    border-radius: 10px;\n    border: 3px solid black;\n    word-wrap: break-word;\n    background-color: ${(p) => p.theme.backgroundSecondary};\n    color: ${(p) => p.theme.primaryText};\n    text-shadow: 0 0 4px rgb(248, 185, 23, 0.4);\n    p {\n        min-width: 0;\n        font-weight: bold;\n        font-size: 0.9em;\n        margin: 3px;\n    }\n    position: relative;\n    /* -webkit-box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\n    box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8); */\n`;\n\nconst TotalTaskTimeBadge = styled.div`\n    display: flex;\n    justify-content: center;\n    text-align: center;\n    border-radius: 3px;\n    p {\n        font-size: 0.7em;\n        color: ${(p) => p.theme.secondaryText};\n        margin: 3px 5px;\n    }\n    background-color: #fabb18;\n    position: absolute;\n    top: 3px;\n    right: 3px;\n    opacity: 0.6;\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nconst FocussedTaskTimer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 80%;\n    width: 50%;\n    /* background-color: #df1aa1; */\n`;\n\nconst CountdownTimerDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 85%;\n    height: 85%;\n    background-color: ${(p) => (p.theme.type === \"l\" ? \"#FFF\" : \"#FFE39E\")};\n    color: #000;\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\n    border-radius: 50%;\n    font-weight: bold;\n    p {\n        margin: 0;\n        font-size: 0.9em;\n    }\n    span {\n        margin: 0 2px;\n        font-size: 0.7em;\n    }\n`;\n\nconst FocussedTaskController = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: center;\n    height: 90%;\n    width: 30%;\n    /* background-color: #f1f7dd; */\n`;\n\nconst PlayPauseButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    height: 40px;\n    background-color: #000;\n    border-radius: 50%;\n    margin: 10px 20px;\n    svg {\n        color: #fabb18;\n        font-size: 1.5em;\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\n    }\n    cursor: pointer;\n`;\n\nconst TaskCompletedDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 45px;\n    height: 45px;\n    margin: 10px 20px;\n    svg {\n        color: ${(p) => p.theme.secondaryText};\n        font-size: 2em;\n    }\n`;\n\nconst UpdateTimeButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 25px;\n    height: 25px;\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\n    color: ${(p) => (p.isDisabled ? \"#777672\" : \"#000\")};\n`;\n\nconst ResetButtonDiv = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    border-radius: 50%;\n    width: 30px;\n    height: 30px;\n    top: 7px;\n    left: 7px;\n    cursor: pointer;\n    background-color: #000;\n    svg {\n        color: #fabb18;\n        width: 20px;\n    }\n`;\n\nexport function FocussedTask() {\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\n    const autoCompleteZeroTimeTask = useSelector((s) => s.settings.autoCompleteZeroTimeTask);\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\n    const dispatch = useDispatch();\n    const delay = 1010; // to account for the delay in executing code.\n    useTimer(\n        (deltaMS) => {\n            if (focussedTask === null) return;\n            else if (focussedTask.remainingTime > 0) {\n                dispatch(tick({ focussedTaskIndex, deltaMS }));\n            } else if (focussedTask.remainingTime === 0) {\n                dingSoundElement.play();\n                if(document.hidden) updatePageTitle(`Fokus: TIMER UP!!!`);\n                dispatch(toggleSoundscapeState(false));\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n                if (autoCompleteZeroTimeTask) {\n                    dispatch(resetFocussedTask());\n                    dispatch(toggleIsCompleted(focussedTask.id));\n                    dispatch(rearrange({ id: focussedTask.id, markedAsComplete: true }));\n                }\n            }\n        },\n        focussedTask !== null && focussedTask.isRunning ? delay : null\n    );\n\n    function updateTaskTimeHandler(val) {\n        if (focussedTask.time + val * MIN_TO_MS < 0) return;\n        if (focussedTask.time + val * MIN_TO_MS > 120 * MIN_TO_MS) return;\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\n        dispatch(toggleSoundscapeState(false));\n    }\n\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\n        if (wasTaskRunning) {\n            updatePageTitle(\"Fokus\");\n            dispatch(toggleSoundscapeState(false));\n        } else {\n            updatePageTitle(`Fokus: ${focussedTask.content}`);\n            dispatch(toggleSoundscapeState(true));\n        }\n    }\n\n    const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\n    let countdownMins = countdownObj.mins;\n    let countdownSecs = countdownObj.secs;\n\n    const totalTaskTimeObj = formattedTimeStringv2(focussedTask.time);\n    let totalTaskMins = totalTaskTimeObj.mins;\n\n    return (\n        <FocussedTaskDiv>\n            <FocussedTaskPlayer>\n                <FocussedTaskTimer>\n                    <div style={{ width: 100, height: 100 }}>\n                        <CircularProgressbarWithChildren\n                            value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\n                            styles={buildStyles({\n                                strokeLinecap: \"butt\",\n                                pathColor: \"#121212\",\n                                trailColor: \"#F0F8FF\",\n                            })}\n                            strokeWidth={9}\n                        >\n                            <CountdownTimerDiv>\n                                <p>{countdownMins}</p>\n                                <span>m</span>\n                                <p>{countdownSecs}</p>\n                                <span>s</span>\n                            </CountdownTimerDiv>\n                        </CircularProgressbarWithChildren>\n                    </div>\n                </FocussedTaskTimer>\n\n                <FocussedTaskController>\n                    <UpdateTimeButtonDiv isDisabled={focussedTask.time + 5 * MIN_TO_MS > 120 * MIN_TO_MS} onClick={() => updateTaskTimeHandler(5)}>\n                        <h4>+5</h4>\n                    </UpdateTimeButtonDiv>\n\n                    {focussedTask.remainingTime !== 0 ? (\n                        <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\n                            {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\n                        </PlayPauseButtonDiv>\n                    ) : (\n                        <TaskCompletedDiv data-tip=\"\" data-for=\"taskCompleted\">\n                            <FaClipboardCheck />\n                            <ReactTooltip id=\"taskCompleted\" getContent={() => \"Task Completed\"} />\n                        </TaskCompletedDiv>\n                    )}\n\n                    <UpdateTimeButtonDiv isDisabled={focussedTask.time - 5 * MIN_TO_MS < 0} onClick={() => updateTaskTimeHandler(-5)}>\n                        <h4>-5</h4>\n                    </UpdateTimeButtonDiv>\n                </FocussedTaskController>\n\n                <ResetButtonDiv\n                    onClick={() => {\n                        dispatch(toggleSoundscapeState(false));\n                        dispatch(resetTaskTimer(focussedTaskIndex));\n                    }}\n                    data-for=\"reset\"\n                    data-tip=\"\"\n                >\n                    <ResetIcon />\n                    <ReactTooltip id=\"reset\" getContent={() => \"Reset\"} />\n                </ResetButtonDiv>\n            </FocussedTaskPlayer>\n            <FocussedTaskContent>\n                <p>{focussedTask.content}</p>\n                <TotalTaskTimeBadge data-tip=\"\" data-for=\"totalTimeBadge\">\n                    <p>{totalTaskMins}m</p>\n                    <ReactTooltip id=\"totalTimeBadge\" getContent={() => \"Task's total time\"} />\n                </TotalTaskTimeBadge>\n            </FocussedTaskContent>\n        </FocussedTaskDiv>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}