{"ast":null,"code":"import { CURRENT_VERSION } from \"./../helpers/constants\";\nexport function getFokusVersion() {\n  try {\n    return localStorage.getItem(\"version\");\n  } catch (e) {\n    console.error(e.message);\n  }\n}\nexport function setFokusVersion(version) {\n  try {\n    localStorage.setItem(\"version\", version);\n  } catch (e) {\n    console.error(e.message);\n  }\n}\nexport function getStateFromLocalStorage() {\n  try {\n    let serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) return undefined;\n    let state = JSON.parse(serializedState); // values to be reset on refresh\n\n    if (state !== undefined) {\n      if (state.tasks.meta.focussedTaskIndex !== -1) {\n        state.tasks.taskArray[state.tasks.meta.focussedTaskIndex].isRunning = false;\n        state.tasks.meta.focussedTaskIndex = -1;\n      }\n\n      state.tasks.soundscape.isPlaying = false;\n    } // values to be reset on refresh\n\n\n    return state;\n  } catch (e) {\n    console.error(e.message);\n    return undefined;\n  }\n}\nexport function setStateInLocalStorage(state) {\n  try {\n    let serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (e) {\n    console.log(\"There was some error in persisting the state. Maybe you're in incognito/private window.\");\n    console.error(e.message);\n  }\n}\nexport function clearStateFromLocalStorage() {\n  try {\n    if (localStorage.getItem(\"state\") !== null) localStorage.removeItem(\"state\");\n  } catch (e) {\n    console.error(e.message);\n  }\n}\nexport function shouldClearStateFromLocalStorage(currentVersion) {\n  try {\n    let version = localStorage.getItem(\"version\");\n\n    if (version === null) {\n      return true;\n    }\n\n    version = parseInt(version);\n    if (currentVersion > version) return true;else return false;\n  } catch (e) {\n    console.error(e.message);\n  }\n}\nexport function clearIfStateInvalidated() {\n  if (shouldClearStateFromLocalStorage(CURRENT_VERSION)) {\n    clearStateFromLocalStorage();\n    setFokusVersion(CURRENT_VERSION);\n  }\n}","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/store/localStorageUtils.js"],"names":["CURRENT_VERSION","getFokusVersion","localStorage","getItem","e","console","error","message","setFokusVersion","version","setItem","getStateFromLocalStorage","serializedState","undefined","state","JSON","parse","tasks","meta","focussedTaskIndex","taskArray","isRunning","soundscape","isPlaying","setStateInLocalStorage","stringify","log","clearStateFromLocalStorage","removeItem","shouldClearStateFromLocalStorage","currentVersion","parseInt","clearIfStateInvalidated"],"mappings":"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","sourcesContent":["import { CURRENT_VERSION } from \"./../helpers/constants\";\n\nexport function getFokusVersion() {\n    try {\n        return localStorage.getItem(\"version\");\n    } catch (e) {\n        console.error(e.message);\n    }\n}\n\nexport function setFokusVersion(version) {\n    try {\n        localStorage.setItem(\"version\", version);\n    } catch (e) {\n        console.error(e.message);\n    }\n}\n\nexport function getStateFromLocalStorage() {\n    try {\n        let serializedState = localStorage.getItem(\"state\");\n        if (serializedState === null) return undefined;\n        let state = JSON.parse(serializedState);\n\n        // values to be reset on refresh\n        if (state !== undefined) {\n            if (state.tasks.meta.focussedTaskIndex !== -1) {\n                state.tasks.taskArray[state.tasks.meta.focussedTaskIndex].isRunning = false;\n                state.tasks.meta.focussedTaskIndex = -1;\n            }\n            state.tasks.soundscape.isPlaying = false;\n        }\n        // values to be reset on refresh\n\n        return state;\n    } catch (e) {\n        console.error(e.message);\n        return undefined;\n    }\n}\n\nexport function setStateInLocalStorage(state) {\n    try {\n        let serializedState = JSON.stringify(state);\n        localStorage.setItem(\"state\", serializedState);\n    } catch (e) {\n        console.log(\"There was some error in persisting the state. Maybe you're in incognito/private window.\");\n        console.error(e.message);\n    }\n}\n\nexport function clearStateFromLocalStorage() {\n    try {\n        if (localStorage.getItem(\"state\") !== null) localStorage.removeItem(\"state\");\n    } catch (e) {\n        console.error(e.message);\n    }\n}\n\nexport function shouldClearStateFromLocalStorage(currentVersion) {\n    try {\n        let version = localStorage.getItem(\"version\");\n        if (version === null) {\n            return true;\n        }\n        version = parseInt(version);\n        if (currentVersion > version) return true;\n        else return false;\n    } catch (e) {\n        console.error(e.message);\n    }\n}\n\nexport function clearIfStateInvalidated() {\n    if (shouldClearStateFromLocalStorage(CURRENT_VERSION)) {\n        clearStateFromLocalStorage();\n        setFokusVersion(CURRENT_VERSION);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}