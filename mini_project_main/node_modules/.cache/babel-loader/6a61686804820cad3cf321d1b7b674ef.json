{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\fokus2\\\\mini_project_main\\\\src\\\\components\\\\MusicBox\\\\MusicVolumeControl.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Slider from \"react-input-slider\";\nimport { updateSoundscapeVolume } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { debounce } from \"./../../helpers\";\nexport function MusicVolumeControl({\n  isDisabled\n}) {\n  _s();\n\n  const ssVolume = useSelector(s => s.tasks.soundscape.volume);\n  const dispatch = useDispatch();\n  const [volume, setVolume] = useState(ssVolume * 100);\n  const debouncedUpdateSoundscapeVolume = debounce(vol => {\n    dispatch(updateSoundscapeVolume(vol / 100));\n  }, 200);\n\n  function onVolumeChangeHandler(vol) {\n    setVolume(vol);\n    debouncedUpdateSoundscapeVolume(vol);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Slider, {\n      axis: \"x\",\n      xstep: 5,\n      xmin: 0,\n      xmax: 100,\n      x: volume,\n      disabled: isDisabled,\n      onChange: ({\n        x\n      }) => onVolumeChangeHandler(x),\n      styles: {\n        track: {\n          backgroundColor: \"#c1c1d7\",\n          width: \"100%\",\n          cursor: \"pointer\"\n        },\n        active: {\n          backgroundColor: \"#FABB18\"\n        },\n        thumb: {\n          backgroundColor: \"#2F2F2F\"\n        },\n        disabled: {\n          opacity: 0.2\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(MusicVolumeControl, \"l1e6eIuZK0J5JF4yYdhQQRfdP34=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = MusicVolumeControl;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicVolumeControl\");","map":{"version":3,"sources":["C:/fokus2/mini_project_main/src/components/MusicBox/MusicVolumeControl.js"],"names":["React","useState","useSelector","useDispatch","Slider","updateSoundscapeVolume","debounce","MusicVolumeControl","isDisabled","ssVolume","s","tasks","soundscape","volume","dispatch","setVolume","debouncedUpdateSoundscapeVolume","vol","onVolumeChangeHandler","x","track","backgroundColor","width","cursor","active","thumb","disabled","opacity"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,SAASC,sBAAT,QAAuC,6CAAvC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,OAAO,SAASC,kBAAT,CAA4B;AAACC,EAAAA;AAAD,CAA5B,EAA0C;AAAA;;AAC7C,QAAMC,QAAQ,GAAGP,WAAW,CAAEQ,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQC,UAAR,CAAmBC,MAA3B,CAA5B;AACA,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM,CAACU,MAAD,EAASE,SAAT,IAAsBd,QAAQ,CAACQ,QAAQ,GAAG,GAAZ,CAApC;AAEA,QAAMO,+BAA+B,GAAGV,QAAQ,CAAEW,GAAD,IAAS;AACtDH,IAAAA,QAAQ,CAACT,sBAAsB,CAACY,GAAG,GAAG,GAAP,CAAvB,CAAR;AACH,GAF+C,EAE7C,GAF6C,CAAhD;;AAIA,WAASC,qBAAT,CAA+BD,GAA/B,EAAoC;AAChCF,IAAAA,SAAS,CAACE,GAAD,CAAT;AACAD,IAAAA,+BAA+B,CAACC,GAAD,CAA/B;AACH;;AAED,sBACI;AAAA,2BACI,QAAC,MAAD;AACI,MAAA,IAAI,EAAC,GADT;AAEI,MAAA,KAAK,EAAE,CAFX;AAGI,MAAA,IAAI,EAAE,CAHV;AAII,MAAA,IAAI,EAAE,GAJV;AAKI,MAAA,CAAC,EAAEJ,MALP;AAMI,MAAA,QAAQ,EAAEL,UANd;AAOI,MAAA,QAAQ,EAAE,CAAC;AAAEW,QAAAA;AAAF,OAAD,KAAWD,qBAAqB,CAACC,CAAD,CAP9C;AAQI,MAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE;AACHC,UAAAA,eAAe,EAAE,SADd;AAEHC,UAAAA,KAAK,EAAE,MAFJ;AAGHC,UAAAA,MAAM,EAAE;AAHL,SADH;AAMJC,QAAAA,MAAM,EAAE;AACJH,UAAAA,eAAe,EAAE;AADb,SANJ;AASJI,QAAAA,KAAK,EAAE;AACHJ,UAAAA,eAAe,EAAE;AADd,SATH;AAYJK,QAAAA,QAAQ,EAAE;AACNC,UAAAA,OAAO,EAAE;AADH;AAZN;AARZ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AA6BH;;GA3CepB,kB;UACKL,W,EACAC,W;;;KAFLI,kB","sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Slider from \"react-input-slider\";\nimport { updateSoundscapeVolume } from \"./../../containers/taskBoard/taskBoardSlice\";\nimport { debounce } from \"./../../helpers\";\n\nexport function MusicVolumeControl({isDisabled}) {\n    const ssVolume = useSelector((s) => s.tasks.soundscape.volume);\n    const dispatch = useDispatch();\n    const [volume, setVolume] = useState(ssVolume * 100);\n\n    const debouncedUpdateSoundscapeVolume = debounce((vol) => {\n        dispatch(updateSoundscapeVolume(vol / 100));\n    }, 200);\n\n    function onVolumeChangeHandler(vol) {\n        setVolume(vol);\n        debouncedUpdateSoundscapeVolume(vol);\n    }\n\n    return (\n        <>\n            <Slider\n                axis=\"x\"\n                xstep={5}\n                xmin={0}\n                xmax={100}\n                x={volume}\n                disabled={isDisabled}\n                onChange={({ x }) => onVolumeChangeHandler(x)}\n                styles={{\n                    track: {\n                        backgroundColor: \"#c1c1d7\",\n                        width: \"100%\",\n                        cursor: \"pointer\",\n                    },\n                    active: {\n                        backgroundColor: \"#FABB18\",\n                    },\n                    thumb: {\n                        backgroundColor: \"#2F2F2F\",\n                    },\n                    disabled: {\n                        opacity: 0.2,\n                    },\n                }}\n            />\n        </>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}